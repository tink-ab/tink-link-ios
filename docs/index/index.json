{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkviewcontroller\/viewdidappear(_:)","title":"func viewDidAppear(Bool)","type":"method"},{"path":"\/documentation\/tinklink\/tinkviewcontroller\/viewdiddisappear(_:)","title":"func viewDidDisappear(Bool)","type":"method"},{"path":"\/documentation\/tinklink\/tinkviewcontroller\/viewdidload()","title":"func viewDidLoad()","type":"method"},{"path":"\/documentation\/tinklink\/tinkviewcontroller\/viewwilldisappear(_:)","title":"func viewWillDisappear(Bool)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkviewcontroller\/usercontentcontroller(_:didreceive:)","title":"func userContentController(WKUserContentController, didReceive: WKScriptMessage)","type":"method"}],"path":"\/documentation\/tinklink\/tinkviewcontroller\/wkscriptmessagehandler-implementations","title":"WKScriptMessageHandler Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkviewcontroller","title":"TinkViewController","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountverification\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountverification\/id-swift.typealias","title":"AccountVerification.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/accountverification","title":"AccountVerification","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/tinklink\/authorizationcode\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/tinklink\/authorizationcode\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/authorizationcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/authorizationcode\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/authorizationcode\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/authorizationcode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/authorizationcode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/authorizationcode","title":"AuthorizationCode","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/businessaccountcheckreport\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/businessaccountcheckreport\/id-swift.typealias","title":"BusinessAccountCheckReport.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/businessaccountcheckreport","title":"BusinessAccountCheckReport","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/configuration\/init(clientid:redirecturi:)","title":"init(clientID: String, redirectURI: String)","type":"init"},{"path":"\/documentation\/tinklink\/configuration\/init(clientid:redirecturi:basedomain:)","title":"init(clientID: String, redirectURI: String, baseDomain: BaseDomain)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/configuration\/basedomain","title":"let baseDomain: BaseDomain","type":"property"},{"path":"\/documentation\/tinklink\/configuration\/clientid","title":"let clientID: String","type":"property"},{"path":"\/documentation\/tinklink\/configuration\/redirecturi","title":"let redirectURI: String","type":"property"}],"path":"\/documentation\/tinklink\/configuration","title":"Configuration","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/consent\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/consent\/id-swift.typealias","title":"Consent.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/consent","title":"Consent","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/credentials\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/credentials\/id-swift.typealias","title":"Credentials.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/credentials","title":"Credentials","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/expensecheckreport\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/expensecheckreport\/id-swift.typealias","title":"ExpenseCheckReport.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/expensecheckreport","title":"ExpenseCheckReport","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/tinklink\/identifier\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/tinklink\/identifier\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/value","title":"let value: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/identifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/identifier\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/identifier\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/identifier\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/identifier","title":"Identifier","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/incomeverification\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/incomeverification\/id-swift.typealias","title":"IncomeVerification.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/incomeverification","title":"IncomeVerification","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/init(code:)","title":"init(code: String)","type":"init"},{"path":"\/documentation\/tinklink\/market\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/tinklink\/market\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/tinklink\/market\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/'...(_:)-850zh","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/tinklink\/market\/'...(_:)-96hya","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/tinklink\/market\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/tinklink\/market\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/tinklink\/market\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/tinklink\/market\/_(_:_:)-8v6m0","title":"static func < (Market, Market) -> Bool","type":"op"},{"path":"\/documentation\/tinklink\/market\/_(_:_:)-8w3dm","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/tinklink\/market\/_=(_:_:)-4eair","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/tinklink\/market\/_=(_:_:)-7e23w","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/market\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/market\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/market\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/tinklink\/market\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/market\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/market\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/market","title":"Market","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/onetimeconnection\/code","title":"let code: AuthorizationCode?","type":"property"},{"path":"\/documentation\/tinklink\/onetimeconnection\/credentialsid","title":"let credentialsID: Credentials.ID","type":"property"}],"path":"\/documentation\/tinklink\/onetimeconnection","title":"OneTimeConnection","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/paymentrequest\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/paymentrequest\/id-swift.typealias","title":"PaymentRequest.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/paymentrequest","title":"PaymentRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/accounts","title":"static let accounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/all","title":"static let all: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/checkingaccounts","title":"static let checkingAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/checkingtransactions","title":"static let checkingTransactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/connectaccounts","title":"static let connectAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/creditcardaccounts","title":"static let creditCardAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/creditcardtransactions","title":"static let creditCardTransactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/einvoices","title":"static let eInvoices: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/identitydata","title":"static let identityData: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/investmentaccounts","title":"static let investmentAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/investmenttransactions","title":"static let investmentTransactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/loanaccounts","title":"static let loanAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/loantransactions","title":"static let loanTransactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/savingaccounts","title":"static let savingAccounts: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/savingtransactions","title":"static let savingTransactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/transactions","title":"static let transactions: RefreshableItems","type":"property"},{"path":"\/documentation\/tinklink\/refreshableitems\/transferdestinations","title":"static let transferDestinations: RefreshableItems","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/refreshableitems\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/tinklink\/refreshableitems\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/tinklink\/refreshableitems\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/refreshableitems\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/tinklink\/refreshableitems\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/tinklink\/refreshableitems\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/refreshableitems","title":"RefreshableItems","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/report\/accountverificationreportid","title":"let accountVerificationReportID: AccountVerification.ID?","type":"property"},{"path":"\/documentation\/tinklink\/report\/transactionreportid","title":"let transactionReportID: TransactionReport.ID?","type":"property"}],"path":"\/documentation\/tinklink\/report","title":"Report","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/accountvereficationreport","title":"static let accountVereficationReport: ReportTypes","type":"property"},{"path":"\/documentation\/tinklink\/reporttypes\/all","title":"static let all: ReportTypes","type":"property"},{"path":"\/documentation\/tinklink\/reporttypes\/transactionreport","title":"static let transactionReport: ReportTypes","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/reporttypes\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/tinklink\/reporttypes\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/tinklink\/reporttypes\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/reporttypes\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/tinklink\/reporttypes\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/tinklink\/reporttypes\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/reporttypes","title":"ReportTypes","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/riskinsightsreport\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/riskinsightsreport\/id-swift.typealias","title":"RiskInsightsReport.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/riskinsightsreport","title":"RiskInsightsReport","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/accounts(_:)","title":"static func accounts(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/activities(_:)","title":"static func activities(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/authorization(_:)","title":"static func authorization(AuthorizationAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/balances(_:)","title":"static func balances(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/beneficiaries(_:)","title":"static func beneficiaries(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/budgets(_:)","title":"static func budgets(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/calendar(_:)","title":"static func calendar(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/categories(_:)","title":"static func categories(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/contacts(_:)","title":"static func contacts(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/credentials(_:)","title":"static func credentials(CredentialsAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/dataexports(_:)","title":"static func dataExports(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/documents(_:)","title":"static func documents(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/follow(_:)","title":"static func follow(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/identity(_:)","title":"static func identity(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/insights(_:)","title":"static func insights(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/investments(_:)","title":"static func investments(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/properties(_:)","title":"static func properties(ReadWriteAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/providers(_:)","title":"static func providers(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/statistics(_:)","title":"static func statistics(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/suggestions(_:)","title":"static func suggestions(ReadAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/transactions(_:)","title":"static func transactions(TransactionAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/transfer(_:)","title":"static func transfer(TransferAccess...) -> Scope","type":"method"},{"path":"\/documentation\/tinklink\/scope\/user(_:)","title":"static func user(UserAccess...) -> Scope","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/grant","title":"case grant","type":"case"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/read","title":"case read","type":"case"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/revoke","title":"case revoke","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/authorizationaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/authorizationaccess","title":"Scope.AuthorizationAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/read","title":"case read","type":"case"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/refresh","title":"case refresh","type":"case"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/write","title":"case write","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/credentialsaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/credentialsaccess","title":"Scope.CredentialsAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readaccess\/read","title":"case read","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/readaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/readaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/readaccess","title":"Scope.ReadAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/read","title":"case read","type":"case"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/write","title":"case write","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/readwriteaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/readwriteaccess","title":"Scope.ReadWriteAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/categorize","title":"case categorize","type":"case"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/read","title":"case read","type":"case"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/write","title":"case write","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/transactionaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transactionaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/transactionaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/transactionaccess","title":"Scope.TransactionAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/execute","title":"case execute","type":"case"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/read","title":"case read","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/transferaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/transferaccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/transferaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/transferaccess","title":"Scope.TransferAccess","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/create","title":"case create","type":"case"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/read","title":"case read","type":"case"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/webhooks","title":"case webHooks","type":"case"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/write","title":"case write","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/useraccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/useraccess\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/scope\/useraccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope\/useraccess","title":"Scope.UserAccess","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/scope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/scope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/scope","title":"Scope","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerror\/code","title":"let code: ErrorStatus","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/credentials","title":"var credentials: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/paymentrequestid","title":"var paymentRequestID: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/providername","title":"var providerName: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/trackingid","title":"let trackingID: String?","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/authenticationerror(_:)","title":"case authenticationError(TinkErrorReason.AuthenticationErrorType)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/badrequest(_:)","title":"case badRequest(TinkErrorReason.BadRequest)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/internalerror(_:)","title":"case internalError(TinkErrorReason.InternalError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/temporaryerror(_:)","title":"case temporaryError(TinkErrorReason.TemporaryError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/undefined(_:)","title":"case undefined(String?)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/usercancelled","title":"case userCancelled","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerror\/errorstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerror\/errorstatus","title":"TinkError.ErrorStatus","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/tinklink\/tinkerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/tinklink\/tinkerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/tinklink\/tinkerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerror","title":"TinkError","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/transactionreport\/id-swift.property","title":"let id: ID","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/transactionreport\/id-swift.typealias","title":"TransactionReport.ID","type":"typealias"}],"path":"\/documentation\/tinklink\/transactionreport","title":"TransactionReport","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/tinklink\/version","title":"var version: String","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/bulkpaymentrequest","title":"BulkPaymentRequest","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountdialogtype\/multi","title":"case multi","type":"case"},{"path":"\/documentation\/tinklink\/accountdialogtype\/none","title":"case none","type":"case"},{"path":"\/documentation\/tinklink\/accountdialogtype\/single","title":"case single","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountdialogtype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountdialogtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/accountdialogtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountdialogtype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/accountdialogtype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/accountdialogtype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/accountdialogtype","title":"AccountDialogType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/basedomain\/custom(_:)","title":"case custom(String)","type":"case"},{"path":"\/documentation\/tinklink\/basedomain\/eu","title":"case eu","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/basedomain\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/basedomain\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/basedomain","title":"BaseDomain","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/financialservicessegment\/all","title":"case all","type":"case"},{"path":"\/documentation\/tinklink\/financialservicessegment\/business","title":"case business","type":"case"},{"path":"\/documentation\/tinklink\/financialservicessegment\/personal","title":"case personal","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tinklink\/financialservicessegment\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/financialservicessegment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/financialservicessegment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tinklink\/financialservicessegment\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/financialservicessegment\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/tinklink\/financialservicessegment\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/financialservicessegment","title":"FinancialServicesSegment","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/accountaggregation\/addcredentials(configuration:market:authorizationcode:locale:scope:sessionid:inputusername:inputprovider:completion:)","title":"static func addCredentials(configuration: Configuration, market: Market, authorizationCode: AuthorizationCode, locale: Locale, scope: [Scope]?, sessionID: String?, inputUsername: String?, inputProvider: String?, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/accountaggregation\/authenticatecredentials(configuration:authorizationcode:credentialsid:completion:)","title":"static func authenticateCredentials(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/accountaggregation\/authorizeforonetimeaccess(configuration:market:scope:locale:sessionid:inputusername:inputprovider:completion:)","title":"static func authorizeForOneTimeAccess(configuration: Configuration, market: Market, scope: [Scope], locale: Locale, sessionID: String?, inputUsername: String?, inputProvider: String?, completion: (Result<OneTimeConnection, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/accountaggregation\/extendconsent(configuration:authorizationcode:credentialsid:completion:)","title":"static func extendConsent(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/accountaggregation\/refreshcredentials(configuration:authorizationcode:credentialsid:authenticate:locale:completion:)","title":"static func refreshCredentials(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, authenticate: Bool?, locale: Locale, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/accountaggregation","title":"Tink.AccountAggregation","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/accountcheck\/createreport(configuration:market:locale:externalreference:refreshableitems:sessionid:inputprovider:inputusername:completion:)","title":"static func createReport(configuration: Configuration, market: Market, locale: Locale, externalReference: String?, refreshableItems: RefreshableItems?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<AccountVerification.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/accountcheck","title":"Tink.AccountCheck","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/businessaccountcheck\/createreport(configuration:market:locale:financialservicessegments:financialinstitutionid:sessionid:inputprovider:inputusername:completion:)","title":"static func createReport(configuration: Configuration, market: Market, locale: Locale, financialServicesSegments: FinancialServicesSegment?, financialInstitutionID: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<BusinessAccountCheckReport.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/businessaccountcheck","title":"Tink.BusinessAccountCheck","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/businesstransactions\/connectaccountsforcontinuousaccess(configuration:market:locale:authorizationcode:refreshableitems:financialservicessegments:financialinstitutionid:sessionid:inputprovider:inputusername:completion:)","title":"static func connectAccountsForContinuousAccess(configuration: Configuration, market: Market, locale: Locale, authorizationCode: AuthorizationCode, refreshableItems: RefreshableItems?, financialServicesSegments: FinancialServicesSegment?, financialInstitutionID: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/businesstransactions\/connectaccountsforonetimeaccess(configuration:market:locale:refreshableitems:financialservicessegments:financialinstitutionid:sessionid:inputprovider:inputusername:completion:)","title":"static func connectAccountsForOneTimeAccess(configuration: Configuration, market: Market, locale: Locale, refreshableItems: RefreshableItems?, financialServicesSegments: FinancialServicesSegment?, financialInstitutionID: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<OneTimeConnection, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/businesstransactions\/extendconsent(configuration:authorizationcode:credentialsid:completion:)","title":"static func extendConsent(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/businesstransactions\/updateconsent(configuration:authorizationcode:credentialsid:completion:)","title":"static func updateConsent(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/businesstransactions","title":"Tink.BusinessTransactions","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/expensecheck\/createreport(configuration:market:locale:externalreference:sessionid:inputprovider:inputusername:completion:)","title":"static func createReport(configuration: Configuration, market: Market, locale: Locale, externalReference: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<ExpenseCheckReport.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/expensecheck","title":"Tink.ExpenseCheck","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/incomecheck\/createreport(configuration:market:locale:externalreference:engineversion:sessionid:inputprovider:inputusername:completion:)","title":"static func createReport(configuration: Configuration, market: Market, locale: Locale, externalReference: String?, engineVersion: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<IncomeVerification.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/incomecheck","title":"Tink.IncomeCheck","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/payments\/authorizevariablerecurringpaymentsmandate(configuration:consentid:authorizationcode:locale:market:completion:)","title":"static func authorizeVariableRecurringPaymentsMandate(configuration: Configuration, consentID: Consent.ID, authorizationCode: AuthorizationCode, locale: Locale, market: Market?, completion: (Result<Consent.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/payments\/initiatebulkpayment(configuration:locale:paymentrequestid:authorizationcode:market:sessionid:inputprovider:inputusername:completion:)","title":"static func initiateBulkPayment(configuration: Configuration, locale: Locale, paymentRequestID: BulkPaymentRequest.ID, authorizationCode: AuthorizationCode, market: Market?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<BulkPaymentRequest.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/payments\/initiatebulkpayment(configuration:market:locale:paymentrequestid:sessionid:inputprovider:inputusername:completion:)","title":"static func initiateBulkPayment(configuration: Configuration, market: Market, locale: Locale, paymentRequestID: BulkPaymentRequest.ID, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<BulkPaymentRequest.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/payments\/initiateonetimepayment(configuration:locale:paymentrequestid:authorizationcode:market:sessionid:inputprovider:inputusername:completion:)","title":"static func initiateOneTimePayment(configuration: Configuration, locale: Locale, paymentRequestID: PaymentRequest.ID, authorizationCode: AuthorizationCode, market: Market?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<PaymentRequest.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/payments\/initiateonetimepayment(configuration:market:locale:paymentrequestid:sessionid:inputprovider:inputusername:completion:)","title":"static func initiateOneTimePayment(configuration: Configuration, market: Market, locale: Locale, paymentRequestID: PaymentRequest.ID, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<PaymentRequest.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/payments","title":"Tink.Payments","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/reports\/createreport(configuration:reporttypes:refreshableitems:accountdialogtype:inputprovider:completion:)","title":"static func createReport(configuration: Configuration, reportTypes: ReportTypes, refreshableItems: RefreshableItems, accountDialogType: AccountDialogType, inputProvider: String?, completion: (Result<Report, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/reports","title":"Tink.Reports","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/riskinsights\/createreport(configuration:market:locale:externalreference:sessionid:inputprovider:inputusername:completion:)","title":"static func createReport(configuration: Configuration, market: Market, locale: Locale, externalReference: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<RiskInsightsReport.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/riskinsights","title":"Tink.RiskInsights","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tink\/transactions\/connectaccountsforcontinuousaccess(configuration:market:locale:authorizationcode:refreshableitems:financialservicessegments:financialinstitutionid:sessionid:inputprovider:inputusername:completion:)","title":"static func connectAccountsForContinuousAccess(configuration: Configuration, market: Market, locale: Locale, authorizationCode: AuthorizationCode, refreshableItems: RefreshableItems?, financialServicesSegments: FinancialServicesSegment?, financialInstitutionID: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/transactions\/connectaccountsforonetimeaccess(configuration:market:locale:refreshableitems:financialservicessegments:financialinstitutionid:sessionid:inputprovider:inputusername:completion:)","title":"static func connectAccountsForOneTimeAccess(configuration: Configuration, market: Market, locale: Locale, refreshableItems: RefreshableItems?, financialServicesSegments: FinancialServicesSegment?, financialInstitutionID: String?, sessionID: String?, inputProvider: String?, inputUsername: String?, completion: (Result<OneTimeConnection, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/transactions\/extendconsent(configuration:authorizationcode:credentialsid:completion:)","title":"static func extendConsent(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"},{"path":"\/documentation\/tinklink\/tink\/transactions\/updateconsent(configuration:authorizationcode:credentialsid:completion:)","title":"static func updateConsent(configuration: Configuration, authorizationCode: AuthorizationCode, credentialsID: Credentials.ID, completion: (Result<Credentials.ID, TinkError>) -> Void) -> UINavigationController","type":"method"}],"path":"\/documentation\/tinklink\/tink\/transactions","title":"Tink.Transactions","type":"enum"}],"path":"\/documentation\/tinklink\/tink","title":"Tink","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror(_:)","title":"case accountInformationError(AccountInformationError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror(_:)","title":"case authorizationError(AuthorizationError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror(_:)","title":"case providerError(ProviderError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror(_:)","title":"case tinkSideError(TinkSideError)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/undefined(_:)","title":"case undefined(String)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror(_:)","title":"case userLoginError(UserLoginError)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror\/noaccounts","title":"case noAccounts","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/accountinformationerror","title":"TinkErrorReason.AuthenticationErrorType.AccountInformationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/actionnotpermitted","title":"case actionNotPermitted","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/sessionexpired","title":"case sessionExpired","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/useractionrequired","title":"case userActionRequired","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/authorizationerror","title":"TinkErrorReason.AuthenticationErrorType.AuthorizationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror\/licensedpartyrejected","title":"case licensedPartyRejected","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror\/providerunavailable","title":"case providerUnavailable","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/providererror","title":"TinkErrorReason.AuthenticationErrorType.ProviderError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/authenticationmethodnotsupported","title":"case authenticationMethodNotSupported","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/tinkinternalservererror","title":"case tinkInternalServerError","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/unknownerror","title":"case unknownError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/tinksideerror","title":"TinkErrorReason.AuthenticationErrorType.TinkSideError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/dynamiccredentialsflowcancelled","title":"case dynamicCredentialsFlowCancelled","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/dynamiccredentialsflowtimeout","title":"case dynamicCredentialsFlowTimeout","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/dynamiccredentialsincorrect","title":"case dynamicCredentialsIncorrect","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/staticcredentialsincorrect","title":"case staticCredentialsIncorrect","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/thirdpartyauthenticationunavailable","title":"case thirdPartyAuthenticationUnavailable","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/userblocked","title":"case userBlocked","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/userconcurrentlogins","title":"case userConcurrentLogins","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/usernotacustomer","title":"case userNotACustomer","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/userloginerror","title":"TinkErrorReason.AuthenticationErrorType.UserLoginError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/authenticationerrortype","title":"TinkErrorReason.AuthenticationErrorType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameteraccountdialogtype","title":"case invalidParameterAccountDialogType","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterauthorizationcode","title":"case invalidParameterAuthorizationCode","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterclientid","title":"case invalidParameterClientID","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparametercredentialsid","title":"case invalidParameterCredentialsID","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterfinancialservicessegments","title":"case invalidParameterFinancialServicesSegments","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterinputprovider","title":"case invalidParameterInputProvider","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterinputusername","title":"case invalidParameterInputUsername","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterpaymentrequestid","title":"case invalidParameterPaymentRequestID","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterredirecturi","title":"case invalidParameterRedirectURI","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterrefreshableitems","title":"case invalidParameterRefreshableItems","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterreporttypes","title":"case invalidParameterReportTypes","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidparameterscope","title":"case invalidParameterScope","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateaccesstoken","title":"case invalidStateAccessToken","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateauthentication","title":"case invalidStateAuthentication","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatecredentials","title":"case invalidStateCredentials","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatecredentialsisawaitingthirdparty","title":"case invalidStateCredentialsIsAwaitingThirdParty","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateembednotallowed","title":"case invalidStateEmbedNotAllowed","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatenonopenbankingprovider","title":"case invalidStateNonOpenBankingProvider","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatepaymentretrynotallowed","title":"case invalidStatePaymentRetryNotAllowed","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatepermanentuserflag","title":"case invalidStatePermanentUserFlag","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateprovider","title":"case invalidStateProvider","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateproviderdoesnotrecognizeuser","title":"case invalidStateProviderDoesNotRecognizeUser","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateredirecturi","title":"case invalidStateRedirectUri","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateredirectedauthorizationtoken","title":"case invalidStateRedirectedAuthorizationToken","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstateredirectedcredentialsid","title":"case invalidStateRedirectedCredentialsID","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstaterefreshcredentialsratelimited","title":"case invalidStateRefreshCredentialsRateLimited","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/invalidstatescope","title":"case invalidStateScope","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/undefined(_:)","title":"case undefined(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/badrequest","title":"TinkErrorReason.BadRequest","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedconsumehandoffsession","title":"case requestFailedConsumeHandoffSession","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreateaccountcheckreport","title":"case requestFailedCreateAccountCheckReport","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreateanonymoususer","title":"case requestFailedCreateAnonymousUser","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreatebulkpayment","title":"case requestFailedCreateBulkPayment","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreatecredentials","title":"case requestFailedCreateCredentials","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreatehandoffsession","title":"case requestFailedCreateHandoffSession","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreateincomecheckreport","title":"case requestFailedCreateIncomeCheckReport","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreaterecurringpayment","title":"case requestFailedCreateRecurringPayment","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreatereport","title":"case requestFailedCreateReport","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreateriskinsightsreport","title":"case requestFailedCreateRiskInsightsReport","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedcreatetransfer","title":"case requestFailedCreateTransfer","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchbulkpayment","title":"case requestFailedFetchBulkPayment","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchbulkpaymentstatus","title":"case requestFailedFetchBulkPaymentStatus","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchcredentials","title":"case requestFailedFetchCredentials","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchexistinguser","title":"case requestFailedFetchExistingUser","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchhandoffsession","title":"case requestFailedFetchHandoffSession","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchlegaltext","title":"case requestFailedFetchLegalText","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchpaymentinfo","title":"case requestFailedFetchPaymentInfo","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchpaymenttransferinfo","title":"case requestFailedFetchPaymentTransferInfo","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchproviderpaymentconditions","title":"case requestFailedFetchProviderPaymentConditions","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchproviders","title":"case requestFailedFetchProviders","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchrecurringpaymentinfo","title":"case requestFailedFetchRecurringPaymentInfo","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchreportsdescribe","title":"case requestFailedFetchReportsDescribe","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchsession","title":"case requestFailedFetchSession","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchtransferaccounts","title":"case requestFailedFetchTransferAccounts","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedfetchuserwithexistingtoken","title":"case requestFailedFetchUserWithExistingToken","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/requestfailedrefreshcredentials","title":"case requestFailedRefreshCredentials","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/internalerror","title":"TinkErrorReason.InternalError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/requestfailedcreateresetcredentials","title":"case requestFailedCreateResetCredentials","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/requestfailedfetchaccounts","title":"case requestFailedFetchAccounts","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/requestfailedfetchprovider","title":"case requestFailedFetchProvider","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/requestfailedoauthdescribe","title":"case requestFailedOauthDescribe","type":"case"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/undefined(_:)","title":"case undefined(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/tinklink\/tinkerrorreason\/temporaryerror","title":"TinkErrorReason.TemporaryError","type":"enum"}],"path":"\/documentation\/tinklink\/tinkerrorreason","title":"TinkErrorReason","type":"enum"}],"path":"\/documentation\/tinklink","title":"TinkLink","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}